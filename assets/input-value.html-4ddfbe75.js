import{_ as c,M as a,p as l,q as i,Q as e,R as n,t as s,N as t,V as u,a1 as r}from"./framework-e03faf0e.js";const d={},k=n("h1",{id:"input-value",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#input-value","aria-hidden":"true"},"#"),s(" Input value")],-1),v=n("p",null,[s("You can use the "),n("code",null,"have.prop"),s(" assertion to grab the text value and yield it to the next assertion.")],-1),m=r(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user-ssn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123-45-6789<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// it looks best if we know the exact value to check</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#user-ssn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-45-6789&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If we don&#39;t know the exact value to expect, we can grab the <code>value</code> property and check if it follows a regular expression.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#user-ssn&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// you can invoke jQuery &quot;val&quot; method</span>
  <span class="token comment">// or use the &quot;have.prop&quot; assertion</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// yields the string value</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d\\d\\d-\\d\\d-\\d\\d\\d\\d$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// alternate regular expression</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{3}-\\d{2}-\\d{4}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h={href:"https://youtu.be/88sIuUz6Jh0",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"see-also",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#see-also","aria-hidden":"true"},"#"),s(" See also")],-1);function x(_,b){const o=a("ExternalLinkIcon"),p=a("RouterLink");return l(),i("div",null,[k,v,e(" fiddle The text input value matching a regular expression "),m,n("p",null,[s("Watch this recipe explained in the video "),n("a",h,[s("Input Text Value Matches A Regular Expression"),t(o)]),s(".")]),e(" fiddle-end "),g,n("ul",null,[n("li",null,[t(p,{to:"/recipes/input-value-as-number.html"},{default:u(()=>[s("Input value as a number")]),_:1})])])])}const q=c(d,[["render",x],["__file","input-value.html.vue"]]);export{q as default};
