import{_ as p,M as c,p as o,q as i,Q as a,R as n,t as s,N as l,a1 as t}from"./framework-e03faf0e.js";const u={},r=n("h1",{id:"dollar-range",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dollar-range","aria-hidden":"true"},"#"),s(" Dollar range")],-1),k=n("h2",{id:"the-exact-price-text",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-exact-price-text","aria-hidden":"true"},"#"),s(" The exact price text")],-1),d=t(`<p>Imagine we want to confirm that the displayed price is within certain range, for example between $10 and $20. We need to grab the text of the element, remove the <code>$</code> character, convert the text to a number, then assert it is within the range. We could add a custom assertion, or simply construct a callback function to be passed as the <code>should(callback)</code> argument to ensure the command plus assertion retries.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>price<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>$99.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// the initial price will come down after a discount</span>
  <span class="token comment">// is applied to be within the expected range</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;$14.99&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dollarRange</span><span class="token punctuation">(</span><span class="token parameter">min$<span class="token punctuation">,</span> max$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check the input arguments first</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>min$ <span class="token operator">&gt;</span> max$<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">min $ should be &lt;= max $</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// construct the &quot;should(callback)&quot; function</span>
  <span class="token comment">// that checks the given jQuery element</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">checkElement</span><span class="token punctuation">(</span><span class="token parameter">$el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> text <span class="token operator">=</span> $el<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token comment">// use any Chai assertions inside the callback</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">within</span><span class="token punctuation">(</span>min$<span class="token punctuation">,</span> max$<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// retry until the price element shows the</span>
<span class="token comment">// price in the expected range, or the command times out</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#price&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token function">dollarRange</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),m=n("h2",{id:"includes-the-dollar-amount-text",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#includes-the-dollar-amount-text","aria-hidden":"true"},"#"),s(" Includes the dollar amount text")],-1),v=n("p",null,"Let's say the element has some text, including a dollar amount. We want to confirm the dollar amount is within a certain range.",-1),h=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shipping<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Ground shipping for $11.79, up to 2 kg.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">includePrice</span><span class="token punctuation">(</span><span class="token parameter">min$<span class="token punctuation">,</span> max$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check the input arguments first</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>min$ <span class="token operator">&gt;</span> max$<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">min $ should be &lt;= max $</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// named capture group that matches &quot;$&quot; + dollar + cents text</span>
    <span class="token keyword">const</span> priceRe <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\$(?&lt;price&gt;\\d+\\.\\d{2})</span><span class="token regex-delimiter">/</span></span>
    <span class="token keyword">const</span> text <span class="token operator">=</span> $el<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> match <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>priceRe<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span> <span class="token string">&#39;matched price regex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token comment">// convert the string to a number</span>
    <span class="token comment">// and confirm it is within the given range</span>
    <span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>price<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">within</span><span class="token punctuation">(</span>min$<span class="token punctuation">,</span> max$<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// confirm the element shows somewhere the price</span>
<span class="token comment">// between $10 and $15</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#shipping&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token function">includePrice</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also write the above test using (mostly) Cypress v12 queries in a single chain, finished by a single <code>be.within</code> assertion to confirm the extracted number is between min and max numbers.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// named capture group that matches &quot;$&quot; + dollar + cents text</span>
<span class="token keyword">const</span> priceRe <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\$(?&lt;price&gt;\\d+\\.\\d{2})</span><span class="token regex-delimiter">/</span></span>
cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;#shipping&#39;</span><span class="token punctuation">,</span> priceRe<span class="token punctuation">)</span> <span class="token comment">// yields jQuery</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span> <span class="token comment">// yields text</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> priceRe<span class="token punctuation">)</span> <span class="token comment">// yields match</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;groups.price&#39;</span><span class="token punctuation">)</span> <span class="token comment">// yields text</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span> <span class="token comment">// yields a number</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.within&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment">// number is between X and Y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g=n("code",null,"cy.then(Number)",-1),b={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"cy.apply",-1),x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;#shipping&#39;</span><span class="token punctuation">,</span> priceRe<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> priceRe<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;groups.price&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span> <span class="token comment">// cy.apply from cypress-map</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.within&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function y(w,_){const e=c("ExternalLinkIcon");return o(),i("div",null,[r,k,a(" fiddle The exact price text "),d,a(" fiddle-end "),m,v,a(" fiddle Includes the dollar amount text "),h,n("p",null,[s("Only the "),g,s(" breaks the retries, but you can replace it with "),n("a",b,[s("cypress-map"),l(e)]),s(),f,s(" query.")]),x,a(" fiddle-end ")])}const q=p(u,[["render",y],["__file","dollar-range.html.vue"]]);export{q as default};
