import{_ as l,M as e,p as i,q as u,R as s,t as n,N as a,Q as o,V as k,a1 as t}from"./framework-e03faf0e.js";const r={},d=s("h1",{id:"use-cy-within-to-limit-the-dom-search",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#use-cy-within-to-limit-the-dom-search","aria-hidden":"true"},"#"),n(" Use cy.within To Limit The DOM Search")],-1),m={href:"https://youtu.be/YpbkEBE42QI",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>Notice that we have the same item &quot;Apples&quot; in both lists. How do we confirm the &quot;Apples&quot; in the second list of all products?</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>recent-items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Recent items<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-purchase-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>81777<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Apples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-purchase-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>61101<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Pears<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>All products<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>190<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>299<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Apples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>871<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>390<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Bananas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>253<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>159<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Kiwi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>809<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>249<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Pears<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={href:"https://on.cypress.io/within",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#items&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">within</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// there should be several items</span>
  cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.length.above&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token comment">// find the product we are looking for</span>
  cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apples&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// and confirm its &quot;data&quot; attributes</span>
    <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-product-id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;190&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-price&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;299&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b=s("strong",null,"Tip:",-1),q=s("code",null,"data-",-1),_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;#items li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apples&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// yields &quot;DOMStringMap&quot; object</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// which we can convert into an object</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>stringify<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>parse<span class="token punctuation">)</span>
  <span class="token comment">// and compare as plain object</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">productId</span><span class="token operator">:</span> <span class="token string">&#39;190&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token string">&#39;299&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f=s("strong",null,"Note:",-1),y=s("code",null,"cy.then",-1),w=s("code",null,"toPlainObject",-1),j={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// preserve the entire retry-able chain of queries</span>
cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;#items li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apples&#39;</span><span class="token punctuation">)</span> <span class="token comment">// query</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span> <span class="token comment">// query</span>
  <span class="token punctuation">.</span><span class="token function">toPlainObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// query</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">productId</span><span class="token operator">:</span> <span class="token string">&#39;190&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token string">&#39;299&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function N(O,T){const p=e("ExternalLinkIcon"),c=e("RouterLink");return i(),u("div",null,[d,s("p",null,[n("📺 Watch this recipe explained in the video "),s("a",m,[n("Find The Right Item Using The cy.within Command Or The Parent Selector"),a(p)]),n(".")]),o(" fiddle Limit the DOM search "),v,s("p",null,[n("We can limit the search using the "),s("a",g,[n("cy.within"),a(p)]),n(" command")]),h,s("p",null,[b,n(" you can confirm multiple "),q,n(" attributes by using the DOM element property (see the recipe "),a(c,{to:"/recipes/dataset.html"},{default:k(()=>[n("Dataset HTML attributes")]),_:1}),n(")")]),_,s("p",null,[f,n(" child command "),y,n(" does not retry. Thus if the element has dynamic attributes that load later, you might want to use the query "),w,n(" from "),s("a",j,[n("cypress-map"),a(p)]),n(" to make the entire chain retry-able.")]),x,o(" fiddle-end ")])}const L=l(r,[["render",N],["__file","use-within.html.vue"]]);export{L as default};
