import{_ as c,M as e,p as i,q as l,Q as a,R as n,t as s,N as t,V as r,a1 as u}from"./framework-e03faf0e.js";const d={},k=n("h1",{id:"keep-it-simple",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#keep-it-simple","aria-hidden":"true"},"#"),s(" Keep it simple")],-1),m=u(`<p>Cypress has Chai, Chai-jQuery, Chai-Sinon assertions bundled, thus if you have a value, you can simply use <code>expect(value).to...</code> assertions to use it. No need to wrap the value using the <code>cy.wrap</code> command simply to call <code>cy.wrap(value).should(...)</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ⚠️ COMPLICATED WAY</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">&#39;CYPRESSIO&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">cypress</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
<span class="token comment">// of course, the above is possible, but wrapping</span>
<span class="token comment">// a value, adding an alias, then getting it back</span>
<span class="token comment">// just to check if the value matches a regular expression</span>
<span class="token comment">// ✅ RECOMMENDED</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;CYPRESSIO&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">cypressio</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={href:"https://youtu.be/MGl7IAwLTlo",target:"_blank",rel:"noopener noreferrer"};function h(v,x){const p=e("ExternalLinkIcon"),o=e("RouterLink");return i(),l("div",null,[k,a(" fiddle Keep it simple "),m,n("p",null,[s("Watch the video "),n("a",g,[s("Keep It Simple (When Writing Cypress Assertions)"),t(p)]),s(".")]),n("p",null,[s("For more examples, see the "),t(o,{to:"/commands/assertions.html"},{default:r(()=>[s("Assertions page")]),_:1}),s(".")]),a(" fiddle-end ")])}const _=c(d,[["render",h],["__file","keep-it-simple.html.vue"]]);export{_ as default};
