import{_ as o,M as c,p as i,q as l,R as s,t as n,N as t,Q as e,a1 as p}from"./framework-e03faf0e.js";const u={},r=s("h1",{id:"spy-on-constructor-function",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spy-on-constructor-function","aria-hidden":"true"},"#"),n(" Spy On Constructor Function")],-1),d={href:"https://youtu.be/By-qJs2UNxk",target:"_blank",rel:"noopener noreferrer"},k=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// application:</span>
<span class="token comment">// the constructor function</span>
<span class="token comment">// we will &quot;share&quot; with the test via a dummy &quot;win&quot; object</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token punctuation">{</span>
  Person<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v=s("code",null,"Person",-1),m={href:"https://on.cypress.io/spy",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">win</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  cy<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> <span class="token string">&#39;Error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In our example, let&#39;s spy on the <code>Person</code> constructor which we get through the object <code>win</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> <span class="token string">&#39;Person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;Person&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Application will call the constructor after some time period</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &quot;application&quot; code calls the &quot;Person&quot; constructor</span>
<span class="token comment">// after some delay</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> kid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">win<span class="token punctuation">.</span>Person</span><span class="token punctuation">(</span><span class="token string">&#39;Joe&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token comment">// experiment with a mistake of calling the constructor</span>
  <span class="token comment">// function without using the &quot;new&quot; keyword</span>
  <span class="token comment">// const kid = win.Person(&#39;Joe&#39;, 10)</span>
  <span class="token comment">// save the reference to the person instance</span>
  win<span class="token punctuation">.</span>kid <span class="token operator">=</span> kid
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Confirm the <code>Person</code> function was called with expected arguments: the string &quot;Joe&quot; and an age number.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@Person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
  <span class="token string">&#39;have.been.calledWith&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Joe&#39;</span><span class="token punctuation">,</span>
  Cypress<span class="token punctuation">.</span>sinon<span class="token punctuation">.</span>match<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Confirm the application code used <code>new Person</code> syntax and not accidentally skipped the <code>new</code> keyword.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@Person&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;firstCall.thisValue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.instanceof&#39;</span><span class="token punctuation">,</span> win<span class="token punctuation">.</span>Person<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Check the created object instance</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.property&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;kid&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// confirm the instance has its properties set</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.keys&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Joe&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function h(g,f){const a=c("ExternalLinkIcon");return i(),l("div",null,[r,s("p",null,[n("📺 Watch this recipe explained in the video "),s("a",d,[n("Spy On Constructor Function"),t(a)]),n(".")]),e(" fiddle Spy on constructor function "),k,s("p",null,[n("Let's spy on the function "),v,n(" by using "),s("a",m,[n("cy.spy"),t(a)]),n(" command. In regular tests, this could be something like")]),b,e(" fiddle-end ")])}const w=o(u,[["render",h],["__file","spy-on-constructor.html.vue"]]);export{w as default};
