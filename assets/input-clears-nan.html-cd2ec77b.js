import{_ as l,M as e,p as i,q as u,Q as p,R as s,t as n,N as a,V as r,a1 as c}from"./framework-e03faf0e.js";const k={},d=s("h1",{id:"input-element-clears-nan-value",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#input-element-clears-nan-value","aria-hidden":"true"},"#"),n(" Input Element Clears NaN Value")],-1),v=c(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter a number<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span>
  el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s confirm the input clears an invalid value after about one second.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#count&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;Hello{enter}&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// after 900ms the value is still &quot;Hello&quot;</span>
  <span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// the value is cleared in the next 200ms</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#count&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// if we enter a valid number, it stays</span>
  <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;123{enter}&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1100</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),m={href:"https://youtu.be/IVoDbs7hraU",target:"_blank",rel:"noopener noreferrer"},h={href:"https://on.cypress.io/wait",target:"_blank",rel:"noopener noreferrer"},b={href:"https://on.cypress.io/clock",target:"_blank",rel:"noopener noreferrer"},g={href:"https://on.cypress.io/tick",target:"_blank",rel:"noopener noreferrer"},f=c(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// freeze the application&#39;s clock</span>
cy<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;wrong{enter}&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// advance the clock instantly by 990ms</span>
cy<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token number">990</span><span class="token punctuation">)</span>
<span class="token comment">// the wrong value still is present</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wrong&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// cross the 1 second mark by advancing</span>
<span class="token comment">// the application&#39;s clock another 20ms</span>
cy<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token comment">// and the input immediately is cleared</span>
<span class="token comment">// since the application &quot;thinks&quot; that 1010ms have passed</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#count&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=s("h2",{id:"see-also",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#see-also","aria-hidden":"true"},"#"),n(" See also")],-1);function y(w,x){const t=e("ExternalLinkIcon"),o=e("RouterLink");return i(),u("div",null,[d,p(" fiddle Input clears NaN value "),v,s("p",null,[n("Watch this recipe in the video "),s("a",m,[n("The Input Element Clears Invalid Values After 1 Second"),a(t)]),n(".")]),s("p",null,[n("We can also write this test without "),s("a",h,[n("cy.wait"),a(t)]),n(" command. We can precisely control the application's clock using the "),s("a",b,[n("cy.clock"),a(t)]),n(" and the "),s("a",g,[n("cy.tick"),a(t)]),n(" commands.")]),f,p(" fiddle-end "),_,s("ul",null,[s("li",null,[a(o,{to:"/recipes/clear-input-flake.html"},{default:r(()=>[n("Clear Input Field Flake")]),_:1})])])])}const q=l(k,[["render",y],["__file","input-clears-nan.html.vue"]]);export{q as default};
