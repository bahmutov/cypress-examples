import{_ as c,M as o,p as i,q as l,R as n,t as s,N as e,Q as a,a1 as p}from"./framework-e03faf0e.js";const u={},r=n("h1",{id:"case-insensitive-attribute-selectors",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#case-insensitive-attribute-selectors","aria-hidden":"true"},"#"),s(" Case-insensitive attribute selectors")],-1),d={href:"https://weekendprojects.dev/posts/css-case-insensitive-selector/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://youtu.be/XQ6GQSmF5_I",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"static-dom",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#static-dom","aria-hidden":"true"},"#"),s(" Static DOM")],-1),m=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-PRIMARY<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Green<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g={href:"https://github.com/cypress-io/cypress/issues/25304",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;button[class=btn-primary i]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.length&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>âœ… Works for static DOM by calling <code>Cypress.$</code> directly, passing the jQuery object to <code>cy.wrap</code> and chaining further assertions.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;button[class=btn-primary i]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
  <span class="token string">&#39;have.length&#39;</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h=n("h2",{id:"dynamic-dom",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dynamic-dom","aria-hidden":"true"},"#"),s(" Dynamic DOM")],-1),y=n("p",null,[s("Let's take a more complex example where the page might change. Calling "),n("code",null,"Cypress.$"),s(" once does not retry, thus we will never find the new elements. One solution is to make the "),n("code",null,"Cypress.$(...)"),s(" call retry-able: wrap the "),n("code",null,"Cypress"),s(" object and use the "),n("code",null,"cy.invoke"),s(" command (which does retry).")],-1),f=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>buttons<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;buttons&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;button class=&quot;btn-PRIMARY&quot;&gt;Green&lt;/button&gt;
      &lt;button class=&quot;btn-primary&quot;&gt;Red&lt;/button&gt;
    </span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;button[class=btn-primary i]&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.length&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip:</strong> you can also use a separate assertion to wait until the page fully loads and then call <code>Cypress.$</code> inside a <code>cy.then</code> callback.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#buttons&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;not.be.empty&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// query the DOM after the page loads</span>
    cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;button[class=btn-primary i]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
      <span class="token string">&#39;have.length&#39;</span><span class="token punctuation">,</span>
      <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function _(j,x){const t=o("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[s("Read "),n("a",d,[s("CSS case insensitive attribute selector"),e(t)]),s(".")]),n("p",null,[s("ðŸ“º Watch the solution in the video "),n("a",k,[s("Case-Insensitive Query With Retries"),e(t)]),s(".")]),v,a(" fiddle Case-insensitive selectors "),m,n("p",null,[s("ðŸš¨ Does not work, see "),n("a",g,[s("#25304"),e(t)])]),b,a(" fiddle-end "),h,y,a(" fiddle Dynamic dom and retrying "),f,a(" fiddle-end ")])}const C=c(u,[["render",_],["__file","case-insensitive-query.html.vue"]]);export{C as default};
