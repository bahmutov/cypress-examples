import{_ as l,M as e,p as i,q as u,Q as a,R as s,t as n,N as t,V as k,a1 as c}from"./framework-e03faf0e.js";const r={},d=s("h1",{id:"checking-for-duplicates",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#checking-for-duplicates","aria-hidden":"true"},"#"),n(" Checking for duplicates")],-1),v=s("h2",{id:"checking-the-list-for-duplicates",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#checking-the-list-for-duplicates","aria-hidden":"true"},"#"),n(" Checking the list for duplicates")],-1),g=c(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Apples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Oranges<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Bananas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The check below reports if the array of unique elements has the same length as the original. It does not report which elements are duplicates.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// destructure Cypress._ for convenience</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> map<span class="token punctuation">,</span> uniq<span class="token punctuation">,</span> countBy<span class="token punctuation">,</span> pickBy <span class="token punctuation">}</span> <span class="token operator">=</span> Cypress<span class="token punctuation">.</span>_
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// wait for the list to be stable</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.length&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> values <span class="token operator">=</span> Cypress<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>$list<span class="token punctuation">,</span> <span class="token string">&#39;innerText&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> distinct <span class="token operator">=</span> <span class="token function">uniq</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>distinct<span class="token punctuation">,</span> <span class="token string">&#39;all strings are different&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>
      values<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need to report the duplicate elements, I suggest using Lodash <code>countBy</code> and <code>pickBy</code> functions and reporting all entries with the count larger than 1.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> counts <span class="token operator">=</span> <span class="token function">countBy</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>$list<span class="token punctuation">,</span> <span class="token string">&#39;innerText&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> duplicates <span class="token operator">=</span> <span class="token function">pickBy</span><span class="token punctuation">(</span>counts<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>duplicates<span class="token punctuation">,</span> <span class="token string">&#39;duplicates&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>empty
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),m=s("h2",{id:"checking-for-duplicate-attributes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#checking-for-duplicate-attributes","aria-hidden":"true"},"#"),n(" Checking for duplicate attributes")],-1),h=s("code",null,"should(cb)",-1),b={href:"https://on.cypress.io/retry-ability",target:"_blank",rel:"noopener noreferrer"},f=c(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a11<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Apples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>b20<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Oranges<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c11<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Bananas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// destructure Cypress._ for convenience</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> map<span class="token punctuation">,</span> countBy<span class="token punctuation">,</span> pickBy <span class="token punctuation">}</span> <span class="token operator">=</span> Cypress<span class="token punctuation">.</span>_
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ids <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>$list<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    $el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-product-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token keyword">const</span> counts <span class="token operator">=</span> <span class="token function">countBy</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span>
  <span class="token keyword">const</span> duplicates <span class="token operator">=</span> <span class="token function">pickBy</span><span class="token punctuation">(</span>counts<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>duplicates<span class="token punctuation">,</span> <span class="token string">&#39;duplicates&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>empty
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),y={href:"https://youtu.be/o9zsDXl97L8",target:"_blank",rel:"noopener noreferrer"};function _(x,w){const p=e("ExternalLinkIcon"),o=e("RouterLink");return i(),u("div",null,[d,v,a(" fiddle List does not have duplicates "),g,a(" fiddle-end "),m,s("p",null,[n("Let's say we need to compare the items by an attribute and detect any duplicates. Grab all the items and build the assertion inside the "),h,n(" function for "),s("a",b,[n("retry-ability"),t(p)]),n(".")]),a(" fiddle Items do not have duplicate attributes "),f,a(" fiddle-end "),s("p",null,[n("Watch the video "),s("a",y,[n("Detect Duplicate Attributes Using Lodash Functions And Should Callback"),t(p)]),n(". Also check out the recipe "),t(o,{to:"/recipes/find-duplicates.html"},{default:k(()=>[n("Find duplicates")]),_:1}),n(".")])])}const q=l(r,[["render",_],["__file","duplicates.html.vue"]]);export{q as default};
