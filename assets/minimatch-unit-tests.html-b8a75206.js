import{_ as i,M as p,p as l,q as u,R as s,t as n,N as a,Q as o,V as r,a1 as t}from"./framework-e03faf0e.js";const d={},k=s("h1",{id:"minimatch-unit-tests",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#minimatch-unit-tests","aria-hidden":"true"},"#"),n(" Minimatch unit tests")],-1),m=s("p",null,"Using Cypress Command Log to see the commands and their arguments is so convenient during debugging, I am using them to even run unit tests.",-1),v={href:"https://youtu.be/xQ5HRmzxEkQ",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>For example, we can use built-in Chai assertions to see them in the Command Log</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>
  Cypress<span class="token punctuation">.</span><span class="token function">minimatch</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/file.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;to/*.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&#39;partial path&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">false</span>
<span class="token function">expect</span><span class="token punctuation">(</span>
  Cypress<span class="token punctuation">.</span><span class="token function">minimatch</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/file.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;**/to/*.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&#39;with wildcard&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unfortunately in the example above we do not see the actual calls to <code>Cypress.minimatch</code>. An improvement would be to use <code>cy.wrap</code> and <code>cy.invoke</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;**invoke as a method**&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;minimatch&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/path/to/file.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;to/*.js&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.false&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;minimatch&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/path/to/file.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;**/to/*.js&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.true&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Warning:</strong> when using <code>cy.invoke</code> you need to consider the retries, since it is a query command. If you only want to call the method once and let it fail:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// FAILS ON PURPOSE</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// disable retries using timeout:0 option</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&#39;minimatch&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;/path/to/file.js&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;does not match&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.true&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),b=s("code",null,"cy.invokeOnce",-1),g={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// FAILS ON PURPOSE</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// does not retry when the assertion fails</span>
  <span class="token punctuation">.</span><span class="token function">invokeOnce</span><span class="token punctuation">(</span><span class="token string">&#39;minimatch&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/path/to/file.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;does not match&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.true&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=s("code",null,"Function.prototype.call",-1),_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>minimatch<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invokeOnce</span><span class="token punctuation">(</span>
    <span class="token string">&#39;call&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// the first argument is the &quot;this&quot; object value</span>
    <span class="token comment">// which we do not use anyway</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">&#39;/path/to/file.js&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;/path/**/*.{js,ts}&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.true&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function j(x,w){const e=p("ExternalLinkIcon"),c=p("RouterLink");return l(),u("div",null,[k,m,s("p",null,[n("📺 Watch this recipe explained in the video "),s("a",v,[n("Minimatch Unit Tests Inside Cypress"),a(e)]),n(".")]),o(" fiddle Minimatch example "),h,s("p",null,[n("Alternative solution is to use "),b,n(" query command from "),s("a",g,[n("cypress-map"),a(e)])]),f,s("p",null,[n("You can even invoke the function by itself, not as an object's method. We can invoke the "),y,n(" method following the advice in the "),a(c,{to:"/recipes/retry-ability.html"},{default:r(()=>[n("Retry-ability examples")]),_:1}),n(".")]),_,o(" fiddle-end ")])}const L=i(d,[["render",j],["__file","minimatch-unit-tests.html.vue"]]);export{L as default};
