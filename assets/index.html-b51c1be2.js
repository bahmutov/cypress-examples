import{_ as i,M as o,p as l,q as u,R as n,t as s,N as e,Q as a,V as r,a1 as t}from"./framework-e03faf0e.js";const d="/cypress-examples/assets/hidden-11cce66a.png",k={},v=n("h1",{id:"cypress-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cypress-api","aria-hidden":"true"},"#"),s(" Cypress API")],-1),m={href:"https://on.cypress.io/custom-commands",target:"_blank",rel:"noopener noreferrer"},h={id:"cypress-commands-add",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#cypress-commands-add","aria-hidden":"true"},"#",-1),g={href:"https://on.cypress.io/custom-commands",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[s("To add a command, use "),n("code",null,"Cypress.Commands.add()"),s(".")],-1),y=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token string">&#39;console&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prevSubject</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">subject<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    method <span class="token operator">=</span> method <span class="token operator">||</span> <span class="token string">&#39;log&#39;</span>

    <span class="token comment">// log the subject to the console</span>
    console<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;The subject is&#39;</span><span class="token punctuation">,</span> subject<span class="token punctuation">)</span>
    <span class="token keyword">return</span> subject
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token comment">// prints the object to the window console</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">life</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=n("p",null,"To yield a value from a custom command to the next command or assertion",-1),C=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token string">&#39;double&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prevSubject</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also wrap a value to be returned - Cypress automatically takes the value of the last command.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token string">&#39;triple&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prevSubject</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),x=n("strong",null,"Note:",-1),j=n("code",null,"cy.wrap",-1),w=n("code",null,"return",-1),T={href:"https://youtu.be/f_H7EH0n9tE",target:"_blank",rel:"noopener noreferrer"},q=n("h3",{id:"calling-other-custom-commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#calling-other-custom-commands","aria-hidden":"true"},"#"),s(" Calling other custom commands")],-1),S=n("p",null,"You can call other custom commands from inside a custom command.",-1),H=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;Joe&#39;</span><span class="token punctuation">)</span>
Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;greeting&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token comment">// call the custom command cy.name</span>
  <span class="token comment">// then form the full greeting text and yield it</span>
  cy<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello, Joe&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={id:"cypress-commands-overwrite",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#cypress-commands-overwrite","aria-hidden":"true"},"#",-1),L={href:"https://on.cypress.io/custom-commands",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,[s("You can overwrite an existing Cypress command, either completely replacing it or wrapping with extra code. For example, to always repeat the string when typing, let's overwrite the "),n("code",null,"cy.type"),s(" command:")],-1),R=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>type-here<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> $el<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// call the original &quot;type&quot; command twice on the jQuery element</span>
  <span class="token keyword">return</span> <span class="token function">type</span><span class="token punctuation">(</span>$el<span class="token punctuation">,</span> text <span class="token operator">+</span> text<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#type-here&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HelloHello&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),I=n("h3",{id:"rename-and-replace-the-cy-then-command",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rename-and-replace-the-cy-then-command","aria-hidden":"true"},"#"),s(" Rename and replace the cy.then command")],-1),N=n("code",null,"cy.then",-1),V={id:"cypress-cookies-debug",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#cypress-cookies-debug","aria-hidden":"true"},"#",-1),G={href:"https://on.cypress.io/cookies",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,[s("To enable or disable cookie debugging, use "),n("code",null,"Cypress.Cookies.debug()"),s(".")],-1),M=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Cypress will now log in the console when</span>
<span class="token comment">// cookies are set or removed</span>
Cypress<span class="token punctuation">.</span>Cookies<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

cy<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;fakeCookie&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123ABC&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">clearCookie</span><span class="token punctuation">(</span><span class="token string">&#39;fakeCookie&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;fakeCookie&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123ABC&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">clearCookie</span><span class="token punctuation">(</span><span class="token string">&#39;fakeCookie&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;fakeCookie&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123ABC&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Y=n("h2",{id:"cypress-cookies-preserveonce-deprecated",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cypress-cookies-preserveonce-deprecated","aria-hidden":"true"},"#"),s(),n("code",null,"Cypress.Cookies.preserveOnce()"),s(" (deprecated)")],-1),$=n("code",null,"Deprecated",-1),D={href:"https://github.com/bahmutov/cypress-v10-preserve-cookie",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,[s("To preserve cookies by its key, use "),n("code",null,"Cypress.Cookies.preserveOnce()"),s(".")],-1),U=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&#39;fakeCookie&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;not.be.ok&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// preserving a cookie will not clear it when</span>
<span class="token comment">// the next test starts</span>
cy<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;lastCookie&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;789XYZ&#39;</span><span class="token punctuation">)</span>
Cypress<span class="token punctuation">.</span>Cookies<span class="token punctuation">.</span><span class="token function">preserveOnce</span><span class="token punctuation">(</span><span class="token string">&#39;lastCookie&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),J=n("h2",{id:"cypress-cookies-default-deprecated",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cypress-cookies-default-deprecated","aria-hidden":"true"},"#"),s(),n("code",null,"Cypress.Cookies.default()"),s(" (deprecated)")],-1),Q=n("code",null,"Deprecated",-1),W={href:"https://github.com/bahmutov/cypress-v10-preserve-cookie",target:"_blank",rel:"noopener noreferrer"},X=n("p",null,[s("To set defaults for all cookies, use "),n("code",null,"Cypress.Cookies.default()"),s(".")],-1),Z=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Cookies<span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">preserve</span><span class="token operator">:</span> <span class="token string">&#39;session_id&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z=t(`<h2 id="cypress-server-default-deprecated" tabindex="-1"><a class="header-anchor" href="#cypress-server-default-deprecated" aria-hidden="true">#</a> <code>Cypress.Server.default()</code> (deprecated)</h2><p>To change the default configuration for cy.server, use <code>Cypress.Server.defaults()</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Server<span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">force404</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">ignore</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle custom logic for ignoring certain requests</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),K={id:"cypress-arch",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#cypress-arch","aria-hidden":"true"},"#",-1),sn={href:"https://on.cypress.io/arch",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,[s("To get CPU architecture name of underlying OS, use "),n("code",null,"Cypress.arch"),s(".")],-1),tn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://on.cypress.io/arch</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>arch<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>exist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),en={id:"cypress-config",tabindex:"-1"},pn=n("a",{class:"header-anchor",href:"#cypress-config","aria-hidden":"true"},"#",-1),on={href:"https://on.cypress.io/config",target:"_blank",rel:"noopener noreferrer"},cn=n("p",null,[s("To get or set configuration options, use "),n("code",null,"Cypress.config()"),s(". Note: the config object should be reserved for Cypress settings, like "),n("code",null,"baseUrl"),s(" and "),n("code",null,"viewportWidth"),s(". To store your custom values use the "),n("code",null,"Cypress.env()"),s(" approach.")],-1),ln=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myConfig <span class="token operator">=</span> Cypress<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// the config has a combination of default</span>
<span class="token comment">// and user values from cypress.json file</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span>
  <span class="token string">&#39;animationDistanceThreshold&#39;</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;defaultCommandTimeout&#39;</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;requestTimeout&#39;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;responseTimeout&#39;</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;viewportHeight&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span>
  <span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;viewportWidth&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// previous assertion yields the value</span>
  <span class="token comment">// now let&#39;s assert the value pretending</span>
  <span class="token comment">// we only know min and max limits</span>
  <span class="token punctuation">.</span><span class="token function">within</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;pageLoadTimeout&#39;</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;waitForAnimations&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// we can check if the property is present without checking its value</span>
<span class="token function">expect</span><span class="token punctuation">(</span>myConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;baseUrl&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// setting and getting an individual property</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&#39;pageLoadTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span>

Cypress<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&#39;pageLoadTimeout&#39;</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span>

<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&#39;pageLoadTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>

Cypress<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&#39;pageLoadTimeout&#39;</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),un={id:"cypress-dom-ishidden",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#cypress-dom-ishidden","aria-hidden":"true"},"#",-1),dn={href:"https://on.cypress.io/dom",target:"_blank",rel:"noopener noreferrer"},kn=n("p",null,[s("To see whether a DOM element is hidden, use "),n("code",null,"Cypress.dom.isHidden()"),s(".")],-1),vn=t(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dom-p<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>I&#39;m hiding!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>visible<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>I&#39;m visible!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> hiddenP <span class="token operator">=</span> Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.dom-p p.hidden&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> visibleP <span class="token operator">=</span> Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.dom-p p.visible&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// our first paragraph has css class &#39;hidden&#39;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span>hiddenP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span>visibleP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: elements that are hidden have a special &quot;crossed eye&quot; icon next to them in the Command Log.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.dom-p p.hidden&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;not.be.visible&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.dom-p p.visible&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.visible&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="Hidden element with the eye icon"></p>',5),mn={id:"cypress-env",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#cypress-env","aria-hidden":"true"},"#",-1),bn={href:"https://on.cypress.io/env",target:"_blank",rel:"noopener noreferrer"},gn=n("p",null,[s("To get or set environment variable, use "),n("code",null,"Cypress.env()"),s(".")],-1),fn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// set multiple environment variables</span>
Cypress<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;veronica.dev.local&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">api_server</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8888/v1/&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// get environment variable</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&#39;host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&#39;veronica.dev.local&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// set environment variable</span>
Cypress<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&#39;api_server&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://localhost:8888/v2/&#39;</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&#39;api_server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>
  <span class="token string">&#39;http://localhost:8888/v2/&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment">// get all environment variable</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span>
  <span class="token string">&#39;host&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;veronica.dev.local&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span>
  <span class="token string">&#39;api_server&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;http://localhost:8888/v2/&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),yn={id:"cypress-platform",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#cypress-platform","aria-hidden":"true"},"#",-1),Cn={href:"https://on.cypress.io/platform",target:"_blank",rel:"noopener noreferrer"},xn=n("p",null,[s("To get name of underlying OS, use "),n("code",null,"Cypress.platform"),s(".")],-1),jn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://on.cypress.io/platform</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>exist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),wn={id:"cypress-platform-1",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#cypress-platform-1","aria-hidden":"true"},"#",-1),qn={href:"https://on.cypress.io/platform",target:"_blank",rel:"noopener noreferrer"},Sn=n("p",null,[s("To get name of underlying OS, use "),n("code",null,"Cypress.platform"),s(".")],-1),Hn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// for example &quot;darwin&quot; on Mac</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>platform<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>exist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Pn={id:"cypress-version",tabindex:"-1"},An=n("a",{class:"header-anchor",href:"#cypress-version","aria-hidden":"true"},"#",-1),Ln={href:"https://on.cypress.io/version",target:"_blank",rel:"noopener noreferrer"},On=n("p",null,[s("To get version of Cypress being run, use "),n("code",null,"Cypress.version"),s(".")],-1),Rn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://on.cypress.io/version</span>
<span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>exist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),In={href:"https://youtu.be/lA_2SARDS2s",target:"_blank",rel:"noopener noreferrer"},Nn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>version<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>major<span class="token punctuation">,</span> minor<span class="token punctuation">,</span> patch<span class="token punctuation">]</span> <span class="token operator">=</span> Cypress<span class="token punctuation">.</span>version
  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> major<span class="token punctuation">,</span> minor<span class="token punctuation">,</span> patch <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>major<span class="token punctuation">,</span> <span class="token string">&#39;&gt;= v9 requires&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Vn={id:"cypress-spec",tabindex:"-1"},En=n("a",{class:"header-anchor",href:"#cypress-spec","aria-hidden":"true"},"#",-1),Gn={href:"https://on.cypress.io/spec",target:"_blank",rel:"noopener noreferrer"},Bn=n("p",null,[n("code",null,"Cypress.spec"),s(" returns you the properties of the spec under test.")],-1),Mn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://on.cypress.io/spec</span>
<span class="token comment">// wrap the object so we can inspect it easily by clicking in the command log</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>spec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include.keys&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;relative&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Yn=t('<h3 id="multiple-specs" tabindex="-1"><a class="header-anchor" href="#multiple-specs" aria-hidden="true">#</a> Multiple specs</h3><p>If you are using <code>cypress open</code> to run multiple specs at once, you can detect it by using the <code>Cypress.spec</code> object. The field <code>name</code> will be set to &quot;All Integration Specs&quot; and the fields <code>absolute</code> and <code>relative</code> will be set to &quot;__all&quot;.</p>',2),$n=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>absolute <span class="token operator">===</span> <span class="token string">&#39;__all&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Running several specs together&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Running a single spec </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Cypress<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>relative<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Dn={id:"cypress-currenttest",tabindex:"-1"},Fn=n("a",{class:"header-anchor",href:"#cypress-currenttest","aria-hidden":"true"},"#",-1),Un={href:"https://docs.cypress.io/api/cypress-api/currenttest",target:"_blank",rel:"noopener noreferrer"},Jn=n("p",null,[n("code",null,"Cypress.currentTest"),s(" is an object representing the currently executing test instance, with properties to access the title of the test.")],-1),Qn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// https://on.cypress.io/currenttest</span>
<span class="token comment">// wrap the object so we can inspect it easily by clicking in the command log</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>currentTest<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include.keys&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;titlePath&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">currentTest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>currentTest<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span>
      <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;Get the current test information&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token comment">// get the entire full title, including the parent suite titles</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>currentTest<span class="token punctuation">)</span>
      <span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;titlePath&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span>to<span class="token punctuation">.</span>deep<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string">&#39;Cypress API&#39;</span><span class="token punctuation">,</span> <span class="token comment">// the top suite</span>
        <span class="token string">&#39;Cypress.currentTest&#39;</span><span class="token punctuation">,</span> <span class="token comment">// the parent suite</span>
        <span class="token string">&#39;Get the current test information&#39;</span><span class="token punctuation">,</span> <span class="token comment">// the test title</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Wn={id:"cypress-testingtype",tabindex:"-1"},Xn=n("a",{class:"header-anchor",href:"#cypress-testingtype","aria-hidden":"true"},"#",-1),Zn={href:"https://docs.cypress.io/api/cypress-api/testing-type",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"Cypress.testingType",-1),Kn=n("code",null,"Cypress.testingType",-1),ns={href:"https://on.cypress.io/component-testing",target:"_blank",rel:"noopener noreferrer"},ss=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>testingType<span class="token punctuation">)</span>
  <span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;e2e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;component&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// in this case, we are running e2e spec</span>
  <span class="token punctuation">.</span>and<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&#39;e2e&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function as(ts,es){const p=o("ExternalLinkIcon"),c=o("RouterLink");return l(),u("div",null,[v,n("p",null,[s("Examples of uses of the Cypress API, for a full reference, go to "),n("a",m,[s("docs.cypress.io"),e(p)])]),n("h2",h,[b,s(),n("a",g,[s("Cypress.Commands.add()"),e(p)])]),f,a(" fiddle Custom commands / add command "),y,a(" fiddle-end "),_,a(" fiddle Custom commands / yield a value "),C,n("p",null,[x,s(" you cannot both use "),j,s(" and "),w,s(" in the same code, since it is ambiguous, watch the video "),n("a",T,[s('Fix The Cypress Error "You are mixing async and sync code"'),e(p)]),s(".")]),a(" fiddle-end "),q,S,a(" fiddle Custom commands / calling other commands "),H,a(" fiddle-end "),n("h2",P,[A,s(),n("a",L,[s("Cypress.Commands.overwrite()"),e(p)])]),O,a(" fiddle Custom commands / overwrite cy.type command "),R,a(" fiddle-end "),I,n("p",null,[s("See the recipe "),e(c,{to:"/recipes/replace-cy-then-command.html"},{default:r(()=>[s("Replace "),N,s(" command")]),_:1}),s(".")]),n("h2",V,[E,s(),n("a",G,[s("Cypress.Cookies.debug()"),e(p)])]),B,a(" fiddle debug "),M,a(" fiddle-end "),Y,n("p",null,[$,s(", use "),n("a",D,[s("cypress-v10-preserve-cookie"),e(p)]),s(".")]),F,a(" fiddle.skip preserveOnce "),U,a(" fiddle-end "),J,n("p",null,[Q,s(", use "),n("a",W,[s("cypress-v10-preserve-cookie"),e(p)]),s(".")]),X,a(" fiddle.skip cookies defaults "),Z,a(" fiddle-end "),z,n("h2",K,[nn,s(),n("a",sn,[s("Cypress.arch"),e(p)])]),an,a(" fiddle Cypress.arch / Get the architecture name "),tn,a(" fiddle-end "),n("h2",en,[pn,s(),n("a",on,[s("Cypress.config()"),e(p)])]),cn,a(" fiddle Cypress.config "),ln,a(" fiddle-end "),n("h2",un,[rn,s(),n("a",dn,[s("Cypress.dom.isHidden()"),e(p)])]),kn,a(" fiddle Cypress.dom.isHidden "),vn,a(" fiddle-end "),n("h2",mn,[hn,s(),n("a",bn,[s("Cypress.env()"),e(p)])]),gn,a(" fiddle Cypress.env "),fn,a(" fiddle-end "),n("h2",yn,[_n,s(),n("a",Cn,[s("Cypress.platform"),e(p)])]),xn,a(" fiddle Cypress.platform / Get underlying OS name "),jn,a(" fiddle-end "),n("h2",wn,[Tn,s(),n("a",qn,[s("Cypress.platform"),e(p)])]),Sn,a(" fiddle Cypress.platform "),Hn,a(" fiddle-end "),n("h2",Pn,[An,s(),n("a",Ln,[s("Cypress.version"),e(p)])]),On,a(" fiddle Cypress.version / Get current version of Cypress being run "),Rn,a(" fiddle-end "),n("p",null,[s("Here is an example of parsing Cypress version and confirming it is at least v9. You can watch the explanation in the short video 📺 "),n("a",In,[s("Parse Cypress Version String And Confirm The Major Version"),e(p)]),s(".")]),a(" fiddle Cypress.version / Parse the Cypress version to confirm the major version "),Nn,a(" fiddle-end "),n("h2",Vn,[En,s(),n("a",Gn,[s("Cypress.spec"),e(p)])]),Bn,a(" fiddle Cypress.spec / Get current spec information "),Mn,a(" fiddle-end "),Yn,a(" fiddle Cypress.spec / Multiple specs "),$n,a(" fiddle-end "),n("h2",Dn,[Fn,s(),n("a",Un,[s("Cypress.currentTest"),e(p)])]),Jn,a(" fiddle Cypress.currentTest / Get the current test information "),Qn,a(" fiddle-end "),n("h2",Wn,[Xn,s(),n("a",Zn,[s("Cypress.testingType"),e(p)])]),n("p",null,[zn,s(" returns the current testing type, determined by the Test Runner chosen to run. The "),Kn,s(' returns "e2e" for Cypress Test Runner integration tests, or "component" for experimental '),n("a",ns,[s("Component Testing"),e(p)]),s(".")]),a(" fiddle Cypress.testingType "),ss,a(" fiddle-end ")])}const os=i(k,[["render",as],["__file","index.html.vue"]]);export{os as default};
