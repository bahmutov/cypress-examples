import{_ as e,M as o,p,q as l,R as s,t as n,N as c,Q as a,a1 as i}from"./framework-e03faf0e.js";const u={},d=s("h1",{id:"html-should-look-assertion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#html-should-look-assertion","aria-hidden":"true"},"#"),n(" HTML Should Look Assertion")],-1),r={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},k=s("em",null,"important",-1),m=s("code",null,"dialog",-1),g=i(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dialog</span> <span class="token attr-name">open</span> <span class="token attr-name">data-cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ok-example<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xyz greeting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Greetings, one and all!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>OK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dialog</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We want to confirm that the dialog has the attribute &quot;open&quot; and has the paragraph element with the class &quot;greeting&quot;. Dialog also should have a form and button with the text &quot;OK&quot;.</p><p>We are not interested in the text inside the paragraph element. We also don&#39;t want to validate any other classes on this element.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-cy=ok-example]&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
    <span class="token string">&#39;look&#39;</span><span class="token punctuation">,</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;dialog open&gt;
        &lt;p class=&quot;greeting&quot;&gt;&lt;/p&gt;
        &lt;form&gt;
          &lt;button&gt;OK&lt;/button&gt;
        &lt;/form&gt;
      &lt;/dialog&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;be.visible&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// yields the subject element</span>
  <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OK&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;[data-cy=ok-example]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.hidden&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function v(h,b){const t=o("ExternalLinkIcon");return p(),l("div",null,[d,s("p",null,[n("Plugin "),s("a",r,[n("cypress-map"),c(t)]),n(' has "should look" assertion that performs partial HTML element match. It lets you check the '),k,n(" elements and their attributes only. For example, let's validate the "),m,n(" element and its contents.")]),a(" fiddle Should look assertion "),g,a(" fiddle-end ")])}const _=e(u,[["render",v],["__file","look-assertion.html.vue"]]);export{_ as default};
