import{_ as i,M as o,p as l,q as u,R as n,t as s,N as t,V as r,Q as a,a1 as e}from"./framework-e03faf0e.js";const d={},k=n("h1",{id:"cy-contains-and-regular-expressions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cy-contains-and-regular-expressions","aria-hidden":"true"},"#"),s(" cy.contains and regular expressions")],-1),g={href:"https://youtu.be/nDXAaWdj6tw",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"cy.contains",-1),v=n("h2",{id:"ignore-case",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ignore-case","aria-hidden":"true"},"#"),s(" Ignore case")],-1),m=n("p",null,[s("Command "),n("code",null,"cy.contains"),s(" can ignore case using an option.")],-1),x=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>greeting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>HeLlO wOrLd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">matchCase</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
  <span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;greeting&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b=n("h2",{id:"use-a-regular-expression",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#use-a-regular-expression","aria-hidden":"true"},"#"),s(" Use a regular expression")],-1),f=n("p",null,[s("You can also use a regular expression with "),n("code",null,"i"),s(" option to ignore the case.")],-1),_=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>greeting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>HeLlO wOrLd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;greeting&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),y=n("h2",{id:"match-the-start-of-the-string",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#match-the-start-of-the-string","aria-hidden":"true"},"#"),s(" Match the start of the string")],-1),w=n("p",null,"Regular expressions are really useful to match a string at the start or end of the text.",-1),j=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>greeting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>HeLlO wOrLd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^Hello</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;greeting&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),q=n("p",null,"Here is matching text at the end:",-1),E=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>greeting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>HeLlO wOrLd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">world$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;greeting&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),L=n("h2",{id:"dynamic-regular-expression",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dynamic-regular-expression","aria-hidden":"true"},"#"),s(" Dynamic regular expression")],-1),R=n("p",null,"If you do not know the text beforehand, you can construct a regular expression object instead of using a regular expression syntax.",-1),O=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>greeting<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>HeLlO wOrLd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// the text to find comes from a variable</span>
<span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token comment">// construct the regular expression object</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;^&#39;</span> <span class="token operator">+</span> start<span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// the cy.contains will be equivalent to /^hello/i</span>
cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;greeting&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),C=n("h2",{id:"escape-the-text",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#escape-the-text","aria-hidden":"true"},"#"),s(" Escape the text")],-1),H=n("p",null,"When building a regular expression, you should take care to escape any special characters.",-1),$={href:"https://youtu.be/hMzqiSUVGwA",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>45 $/day<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let&#39;s say we want to find the element with a number followed by the <code>$/day</code> text. Simply constructing the regular expression will not work, since the <code>$</code> character has special meaning in regular expressions.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 🚨 DOES NOT WORK</span>
<span class="token comment">// The &quot;$&quot; in the regular expression causes problems</span>
<span class="token keyword">const</span> suffix <span class="token operator">=</span> <span class="token string">&#39;$/day&#39;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rate&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✅ Escape the $ character when building a regular expression</span>
<span class="token keyword">const</span> suffix <span class="token operator">=</span> <span class="token string">&#39;\\\\$/day&#39;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rate&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we don&#39;t know which characters the text might have, we might want to escape them all using the Lodash <code>_.escapeRegExp</code> function. Since Lodash is bundled with Cypress, nothing to install.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ✅ Escape all special Regexp characters</span>
<span class="token comment">// using _.escapeRegExp</span>
cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">escapeRegExp</span><span class="token punctuation">(</span><span class="token string">&#39;$/day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
  <span class="token string">&#39;have.id&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;rate&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function V(I,W){const p=o("ExternalLinkIcon"),c=o("RouterLink");return l(),u("div",null,[k,n("p",null,[s("📺 Watch this recipe explained in the video "),n("a",g,[s("cy.contains And Regular Expressions Examples"),t(p)]),s(".")]),n("p",null,[s("For more "),h,s(" examples, see "),t(c,{to:"/commands/querying.html"},{default:r(()=>[s("Querying commands")]),_:1}),s(".")]),v,m,a(" fiddle Ignore case "),x,a(" fiddle-end "),b,f,a(" fiddle Use a regular expression to ignore case "),_,a(" fiddle-end "),y,w,a(" fiddle Find element that starts with hello "),j,a(" fiddle-end "),q,a(" fiddle Find element that ends with world "),E,a(" fiddle-end "),L,R,a(" fiddle Construct the regular expression from a string value "),O,a(" fiddle-end "),C,H,n("p",null,[s("📺 Watch this example explained in the video "),n("a",$,[s("Escape Regular Expression Text When Using cy.contains Command"),t(p)]),s(".")]),a(" fiddle Escape the text when building the regular expression "),N,a(" fiddle-end ")])}const T=i(d,[["render",V],["__file","contains-regular-expression.html.vue"]]);export{T as default};
