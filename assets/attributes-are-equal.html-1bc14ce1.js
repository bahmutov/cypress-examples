import{_ as l,M as e,p as u,q as i,R as n,t as a,N as s,Q as p,V as r,a1 as o}from"./framework-e03faf0e.js";const k={},d=n("h1",{id:"attributes-are-equal",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#attributes-are-equal","aria-hidden":"true"},"#"),a(" Attributes are equal")],-1),m={href:"https://youtu.be/yTQf6vlWiHA",target:"_blank",rel:"noopener noreferrer"},v=o(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Venus<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>The first planet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Venus<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Another planet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#el1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-name&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// use assertions to ensure the data attribute is set</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;be.not.empty&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// now we know the attribute value</span>
    <span class="token comment">// and can directly confirm the second element</span>
    <span class="token comment">// has the same attribute</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#el2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-name&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h=n("strong",null,"Tip:",-1),g={href:"https://www.youtube.com/watch?v=X8iIoTxu_8k",target:"_blank",rel:"noopener noreferrer"},b=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#el1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Venus&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#el2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Venus&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f=n("h2",{id:"see-also",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#see-also","aria-hidden":"true"},"#"),a(" See also")],-1);function _(q,x){const t=e("ExternalLinkIcon"),c=e("RouterLink");return u(),i("div",null,[d,n("p",null,[a(`Let's confirm the fact that the two elements have equal "data-name" attributes. We don't know the expected value of the attribute, unfortunately, just that both elements have the same non-empty string value. For the explanation, watch the video `),n("a",m,[a("Check If Two Elements Have The Same Attribute Value"),s(t)]),a(".")]),p(" fiddle attributes are equal "),v,n("p",null,[h,a(" I recommend striving knowing exactly the values to expect in the test, see the video "),n("a",g,[a("Good Cypress Test Syntax"),s(t)]),a(". A better test would be:")]),b,p(" fiddle-end "),f,n("ul",null,[n("li",null,[a("Recipe "),s(c,{to:"/recipes/confirm-attribute.html"},{default:r(()=>[a("Confirm attribute")]),_:1})])])])}const y=l(k,[["render",_],["__file","attributes-are-equal.html.vue"]]);export{y as default};
