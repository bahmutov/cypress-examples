import{_ as c,M as o,p as i,q as u,Q as a,R as n,t as s,N as e,a1 as t}from"./framework-e03faf0e.js";const l={},r=n("h1",{id:"parse-price",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parse-price","aria-hidden":"true"},"#"),s(" Parse price")],-1),k=n("h2",{id:"utility-function",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#utility-function","aria-hidden":"true"},"#"),s(" Utility function")],-1),d=n("p",null,[s("Let's say that in the element's text we have a price that we need to find and extract as a number. The price could be simple "),n("code",null,"$1.99"),s(" or could have "),n("code",null,"-"),s(" sign in front of it "),n("code",null,"discount coupon -$2.12 applied"),s(".")],-1),v={href:"https://youtu.be/1iOU9ZPd0pg",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parsePrice</span><span class="token punctuation">(</span><span class="token parameter">$el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> text <span class="token operator">=</span> $el<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> matched <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;price&gt;-?\\$\\d+\\.\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> priceText <span class="token operator">=</span> Cypress<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>matched<span class="token punctuation">,</span> <span class="token string">&#39;groups.price&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>priceText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">NaN</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>priceText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g=n("code",null,"Cypress.$(html)",-1),h={href:"https://on.cypress.io/wrap",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;$1.99&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parsePrice<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token number">1.99</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;-$1.99&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parsePrice<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.99</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;Final price $10.99&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parsePrice<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token number">10.99</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;Total discount -$10.99 applied&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parsePrice<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10.99</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Testing cases without a price</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;loading...&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parsePrice<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.a.NaN&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;20&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parsePrice<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.a.NaN&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;$20.1&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parsePrice<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.a.NaN&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),f=n("h2",{id:"fluent-chain",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fluent-chain","aria-hidden":"true"},"#"),s(" Fluent chain")],-1),y=n("p",null,[s("You can rewrite the above command to be a fluent chain of queries (except for "),n("code",null,"cy.then"),s(" step).")],-1),_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;Final price $10.99&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;price&gt;-?\\$\\d+\\.\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;groups.price&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;replace&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parseFloat<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token number">10.99</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=n("strong",null,"Tip:",-1),w=n("code",null,"cy.then(parseFloat)",-1),$=n("code",null,"cy.apply(parseFloat)",-1),j={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},P=n("h2",{id:"reusable-query",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reusable-query","aria-hidden":"true"},"#"),s(" Reusable query")],-1),C=t(`<p>Let&#39;s move our utility function into <code>parsePrice</code> query that we can call on demand.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">addQuery</span><span class="token punctuation">(</span><span class="token string">&#39;parsePrice&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">subject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> text <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> matched <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;price&gt;-?\\$\\d+\\.\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> priceText <span class="token operator">=</span> Cypress<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>matched<span class="token punctuation">,</span> <span class="token string">&#39;groups.price&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>priceText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">NaN</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>priceText<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compared to <code>cy.then(parsePrice)</code>, the query approach can retry parsing the price while the element is updated.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> $el <span class="token operator">=</span> Cypress<span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;Final price --&lt;/p&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  $el<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&#39;Final price $10.99&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>$el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parsePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token number">10.99</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function N(T,q){const p=o("ExternalLinkIcon");return i(),u("div",null,[r,k,d,a(" fiddle Find and parse the price "),n("p",null,[s("Watch explanation for this recipe in the video "),n("a",v,[s("How To Unit Test Find And Parse The Price Function That Needs A jQuery Object"),e(p)]),s(".")]),m,n("p",null,[s("A convenient way to test multiple DOM elements is to construct them on the fly using "),g,s(" and "),n("a",h,[s("cy.wrap"),e(p)]),s(" command.")]),b,a(" fiddle-end "),f,y,a(" fiddle Parse price using fluent programming "),_,n("p",null,[x,s(" instead of "),w,s(" use "),$,s(" from "),n("a",j,[s("cypress-map"),e(p)]),s(" to preserve retry-ability of the entire query chain.")]),a(" fiddle-end "),P,a(" fiddle Parse price using reusable query "),C,a(" fiddle-end ")])}const V=c(l,[["render",N],["__file","parse-price.html.vue"]]);export{V as default};
