import{_ as p,M as c,p as o,q as i,R as s,t as n,N as t,Q as e,a1 as l}from"./framework-e03faf0e.js";const u={},r=s("h1",{id:"should-read-assertion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#should-read-assertion","aria-hidden":"true"},"#"),n(" Should read assertion")],-1),d={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},k={href:"https://youtu.be/AzJx-8VD6yI",target:"_blank",rel:"noopener noreferrer"},g=l(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todos<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Write code<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Add tests<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Pay $10 fine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s confirm the exact text of the first LI element:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Write code&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We can confirm <em>partial</em> text match using <code>cy.contains</code> or <code>include.text</code> assertion:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Add&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Add tests&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include.text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Write c&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>To confirm multiple <em>exact</em> text matches, you can use the <code>should read</code> custom assertion from the <code>cypress-map</code> plugin:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;Write code&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Add tests&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Pay $10 fine&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The assertion ensures there is the exact number of elements and the text inside each element is the same as the given string. It will fail if the numbers are different</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ðŸš¨ fails on purpose, since there are 3 LI elements</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Write code&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Add tests&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>With <code>should read</code>, you can use either exact text matches or match against regular expressions. For example, if we do not know the precise fine amount, we could use:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;Write code&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Add tests&#39;</span><span class="token punctuation">,</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^Pay \\$\\d+ fine$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function m(v,h){const a=c("ExternalLinkIcon");return o(),i("div",null,[r,s("p",null,[n("This assertion comes from the "),s("a",d,[n("cypress-map"),t(a)]),n(" plugin. It is useful for checking the text content of list of elements against strings or regular expressions.")]),s("p",null,[n("ðŸ“º Watch this recipe explained in the video "),s("a",k,[n("Custom Should Read Assertion From Cypress-map Plugin"),t(a)]),n(".")]),e(" fiddle Should read "),g,e(" fiddle-end ")])}const b=p(u,[["render",m],["__file","should-read.html.vue"]]);export{b as default};
