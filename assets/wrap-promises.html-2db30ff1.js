import{_ as i,M as o,p as u,q as l,R as s,t as n,N as a,Q as p,V as r,a1 as e}from"./framework-e03faf0e.js";const k={},d=s("h1",{id:"wrap-promises",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#wrap-promises","aria-hidden":"true"},"#"),n(" Wrap promises")],-1),m={href:"https://on.cypress.io/wrap",target:"_blank",rel:"noopener noreferrer"},h=s("h2",{id:"a-single-promise",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#a-single-promise","aria-hidden":"true"},"#"),n(" A single promise")],-1),v=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),g=s("h2",{id:"multiple-promises",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#multiple-promises","aria-hidden":"true"},"#"),n(" Multiple promises")],-1),b=s("p",null,[n("Use "),s("code",null,"Promise.all"),n(" to create a single promise to wait for multiple promises.")],-1),f=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">digestMessage</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// encode as (utf-8) Uint8Array</span>
  <span class="token keyword">const</span> msgUint8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
  <span class="token keyword">const</span> hashBuffer <span class="token operator">=</span> <span class="token keyword">await</span> crypto<span class="token punctuation">.</span>subtle<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>
    <span class="token string">&#39;SHA-256&#39;</span><span class="token punctuation">,</span>
    msgUint8<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token comment">// hash the message</span>
  <span class="token keyword">const</span> hashArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>hashBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> hashHex <span class="token operator">=</span> hashArray
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// convert bytes to hex string</span>
  <span class="token keyword">return</span> hashHex
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can compute sha of multiple strings in parallel.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>
  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token function">digestMessage</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">digestMessage</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">digestMessage</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
  <span class="token comment">// resolves with an array of hashes</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.length&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token comment">// use cy.spread to spread the array elements into arguments</span>
  <span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sha1<span class="token punctuation">,</span> sha2<span class="token punctuation">,</span> sha3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>sha1<span class="token punctuation">,</span> <span class="token string">&#39;sha1 !== sha2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>sha2<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>sha1<span class="token punctuation">,</span> <span class="token string">&#39;sha1 !== sha3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>sha3<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>sha2<span class="token punctuation">,</span> <span class="token string">&#39;sha2 !== sha3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>sha3<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_=s("code",null,"cy.map",-1),y={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"Promise.all",-1),x=s("code",null,"Promise.all",-1),j=s("code",null,"Promise",-1),A={href:"https://glebbahmutov.com/blog/no-binding-necessary/",target:"_blank",rel:"noopener noreferrer"},P=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>digestMessage<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">shas</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    shas<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sha<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">expect</span><span class="token punctuation">(</span>sha<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sha </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=s("strong",null,"👍 Highly recommended:",-1),S={href:"https://glebbahmutov.com/blog/setup-cypress-data/",target:"_blank",rel:"noopener noreferrer"};function N(C,H){const t=o("ExternalLinkIcon"),c=o("RouterLink");return u(),l("div",null,[d,s("p",null,[n("You can use "),s("a",m,[n("cy.wrap"),a(t)]),n(" command to wait for promises to resolve before continuing Cypress test.")]),h,p(" fiddle Wrap a single promise "),v,p(" fiddle-end "),g,b,p(" fiddle Multiple promises "),s("p",null,[n("Let's compute SHA of the given text using an asynchronous function from the "),a(c,{to:"/recipes/sha-256.html"},{default:r(()=>[n("Compute SHA256")]),_:1}),n(" recipe.")]),f,s("p",null,[n("The same wait can be achieved by mapping data into an array of promises using "),_,n(" from "),s("a",y,[n("cypress-map"),a(t)]),n(" plugin and then applying "),w,n(" function. Note: you need to bind "),x,n(" method to the "),j,n(" itself to work properly, typical "),s("a",A,[n("JavaScript context madness"),a(t)]),n(".")]),P,p(" fiddle-end "),s("p",null,[M,n(" read the blog post "),s("a",S,[n("The Zen Of Cypress Data Setup"),a(t)]),n(".")])])}const q=i(k,[["render",N],["__file","wrap-promises.html.vue"]]);export{q as default};
