import{_ as o,M as c,p as i,q as u,Q as t,R as s,t as n,N as p,a1 as e}from"./framework-e03faf0e.js";const l="/cypress-examples/assets/possess-521e58a7.png",k={},r=s("h1",{id:"don-t-change-the-subject",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#don-t-change-the-subject","aria-hidden":"true"},"#"),n(" Don't Change The Subject")],-1),d=e(`<p>Imagine we are checking the server response. There are properties at different nesting levels. We want to check:</p><ul><li>the status code and the <code>isOkStatusCode</code> properties</li><li>drill into the <code>body</code> and confirm <ul><li>the <code>id</code> value</li><li>the keys present in the response object</li><li>the <code>email</code> property is a string that includes the <code>@</code> character</li></ul></li></ul><p>We cannot simply use the <code>have.property</code> assertion, since it changes the subject</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://jsonplaceholder.cypress.io/comments/1&#39;</span>
cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.property&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isOkStatusCode&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token comment">// oops, the subject now is just \`true\`</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could pass the entire subject to <code>cy.then(callback)</code> and use the explicit assertions</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;isOkStatusCode&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>nested<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;body.id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// drill down into the &quot;body&quot;</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">body</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;postId&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">satisfy</span><span class="token punctuation">(</span>Cypress<span class="token punctuation">.</span>_<span class="token punctuation">.</span>isString<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">satisfy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),v={href:"http://github.com/bahmutov/cy-spok",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"possess",-1),h={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"have.property",-1),g=s("code",null,"possess",-1),f=s("code",null,"possess",-1),y=s("strong",null,"Bonus:",-1),_=s("code",null,"possess",-1),j=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;possess&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isOkStatusCode&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token comment">// yields the original subject</span>
  <span class="token comment">// so you can continue checking</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;possess&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;status&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
  <span class="token comment">// supports the nested properties</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;possess&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;body.id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token comment">// let&#39;s drill into the &quot;body&quot;</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.keys&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;postId&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// you can even use predicate functions</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;possess&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> Cypress<span class="token punctuation">.</span>_<span class="token punctuation">.</span>isString<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;possess&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Short, expressive, and looks good in the Command Log</p><p><img src="`+l+'" alt="Possess assertions"></p>',3);function x(C,q){const a=c("ExternalLinkIcon");return i(),u("div",null,[r,t(" fiddle Checking the request object "),d,s("p",null,[n("Ughh, so verbose! To make the assertions more elegant, we could use my plugin "),s("a",v,[n("cy-spok"),p(a)]),n(", but there is another way. We can use the "),m,n(" assertion from my plugin "),s("a",h,[n("cypress-map"),p(a)]),n(". The main difference between "),b,n(" and "),g,n(" is that the assertion "),f,n(" does not change the current subject. "),y,n(" the assertion "),_,n(" also supports deep properties and checking the value against the predicates.")]),j,t(" fiddle-end ")])}const w=o(k,[["render",x],["__file","dont-change-the-subject.html.vue"]]);export{w as default};
