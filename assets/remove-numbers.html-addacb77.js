import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,Q as e,a1 as i}from"./framework-e03faf0e.js";const u={},r=n("h1",{id:"remove-numbers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#remove-numbers","aria-hidden":"true"},"#"),s(" Remove numbers")],-1),k=n("code",null,"String.prototype.replace",-1),d=n("code",null,"cy.mapInvoke",-1),g={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},m=i(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fruit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Apples 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Grapes 10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Kiwi 8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After removing all digits, we can trim the whitespace and confirm the expected array of strings.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#fruit li&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// cy.map, cy.mapInvoke come from the cypress-map plugin</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">&#39;innerText&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">mapInvoke</span><span class="token punctuation">(</span><span class="token string">&#39;replace&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">mapInvoke</span><span class="token punctuation">(</span><span class="token string">&#39;trim&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Apples&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Grapes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kiwi&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use other regular expressions to remove characters. For example, we can avoid invoking the <code>trim</code> method and instead replace digits and white space characters in a single Regex.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#fruit li&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">&#39;innerText&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">mapInvoke</span><span class="token punctuation">(</span><span class="token string">&#39;replace&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\d\\s]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Apples&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Grapes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kiwi&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v=n("strong",null,"Tip:",-1),h={href:"https://www.regular-expressions.info/refshorthand.html",target:"_blank",rel:"noopener noreferrer"};function f(b,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("Imagine we have a list of strings, but there are extra characters that we want to remove from each string. We can iterate over the list and call "),k,s(" and use a regular expression. The iteration and invocation in this solution is done using the "),d,s(" query command from the "),n("a",g,[s("cypress-map"),t(a)]),s(" plugin.")]),e(" fiddle Remove numbers "),m,n("p",null,[v,s(" you can lookup regular expressions in "),n("a",h,[s("here"),t(a)])]),e(" fiddle-end ")])}const w=p(u,[["render",f],["__file","remove-numbers.html.vue"]]);export{w as default};
