import{_ as t,p as e,q as o,Q as s,R as n,t as a,a1 as p}from"./framework-e03faf0e.js";const c={},i=n("h1",{id:"overflow",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#overflow","aria-hidden":"true"},"#"),a(" Overflow")],-1),l=n("h2",{id:"button-with-overflowing-text",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#button-with-overflowing-text","aria-hidden":"true"},"#"),a(" Button with overflowing text")],-1),u=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>click<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click This Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>big-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Click That Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#click</span> <span class="token punctuation">{</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
  <span class="token property">max-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s confirm the first button overflows it 60x30 pixel boundary, while the second button &quot;grows&quot; to enclose the entire text. First, let&#39;s write a utility function that returns true if the DOM element is overflowing its client dimensions.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isOverflown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  clientWidth<span class="token punctuation">,</span>
  clientHeight<span class="token punctuation">,</span>
  scrollWidth<span class="token punctuation">,</span>
  scrollHeight<span class="token punctuation">,</span>
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> scrollHeight <span class="token operator">&gt;</span> clientHeight <span class="token operator">||</span> scrollWidth <span class="token operator">&gt;</span> clientWidth
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s add a new Chai method that checks the current jQuery subject to be overflowing or now.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>chai<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_chai<span class="token punctuation">,</span> utils</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// use &quot;function&quot; syntax to make sure when Chai</span>
  <span class="token comment">// calls it, the &quot;this&quot; object points at Chai</span>

  <span class="token keyword">function</span> <span class="token function">overflowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Cypress<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">isJquery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Expected a jQuery object&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// the _obj should be a jQuery object</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>
      <span class="token function">isOverflown</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&#39;expected element to overflow&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;expected element not to overflow&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  _chai<span class="token punctuation">.</span>Assertion<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token string">&#39;overflow&#39;</span><span class="token punctuation">,</span> overflowing<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, let&#39;s use the new assertion method using implicit <code>should(&#39;overflow&#39;)</code> and its negative <code>should(&#39;not.overflow&#39;)</code> variants.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;overflow&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#big-button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;not.overflow&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s confirm the assertion correctly fails for non-jQuery or empty objects. Here are some skipped examples.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;not.overflow&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#does-not-exist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;not.overflow&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function r(d,k){return e(),o("div",null,[i,l,s(" fiddle Button with overflowing text "),u,s(" fiddle-end ")])}const m=t(c,[["render",r],["__file","overflow.html.vue"]]);export{m as default};
