import{_ as o,M as c,p as l,q as i,R as n,t as s,N as t,Q as e,a1 as p}from"./framework-e03faf0e.js";const u={},r=n("h1",{id:"dataset-html-attributes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dataset-html-attributes","aria-hidden":"true"},"#"),s(" Dataset HTML attributes")],-1),d=n("p",null,[s("You can store non-html information in the element "),n("code",null,"data-*"),s(" attributes and access them via "),n("code",null,"dataset"),s(" property.")],-1),k=n("h2",{id:"convert-dataset-to-a-plain-object",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#convert-dataset-to-a-plain-object","aria-hidden":"true"},"#"),s(" Convert dataset to a plain object")],-1),v={href:"https://youtu.be/t8BSY2czges",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>electric-cars<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-index-number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12314<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cars<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  All about electric cards
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All <code>data-*</code> properties are collected in a single object. Property names are camel-cased, all values are strings. We can confirm a single property</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;indexNumber&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// equivalent to checking the &quot;data-*&quot; attribute</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
  <span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;data-index-number&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s try confirming all <code>data-*</code> attributes. Directly comparing property with an object does not work</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ðŸš¨ INCORRECT</span>
<span class="token comment">// cannot compare dataset object with a plain object</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">indexNumber</span><span class="token operator">:</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&#39;cars&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead, yield the <code>dataset</code> value and convert into a plain object first before using <code>deep.equal</code> assertion.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// yields &quot;DOMStringMap&quot; object</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// which we can convert into an object</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>stringify<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>parse<span class="token punctuation">)</span>
  <span class="token comment">// and compare as plain object</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">indexNumber</span><span class="token operator">:</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&#39;cars&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),b=n("strong",null,"Tip:",-1),g={href:"https://github.com/bahmutov/cy-spok",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"query-commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#query-commands","aria-hidden":"true"},"#"),s(" Query commands")],-1),f=n("code",null,"DOMStringMap",-1),y=n("code",null,"JSON.parse(JSON.stringify(x))",-1),_=n("code",null,"cy.then(JSON.stringify).then(JSON.parse)",-1),q=n("code",null,"cy.then",-1),j={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"DOMStringMap",-1),N=p(`<p>In the example below, one of the data attributes is set after a delay.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>electric-cars<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-index-number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loading...<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cars<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  All about electric cards
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// force the tests to retry by adding &quot;data-index-number&quot; attribute</span>
  <span class="token comment">// after some delay</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document
      <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;electric-cars&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-index-number&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we simply use <code>cy.then(...)</code> callbacks to convert data collection into a plain object, it would convert it once and then try running the assertions. But it would not retry, thus failing the test.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ðŸš¨ INCORRECT</span>
<span class="token comment">// does not retry getting the attributes</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>stringify<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>parse<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">indexNumber</span><span class="token operator">:</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&#39;cars&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can keep querying the DOM and converting to a plain object until the assertion passes. A simple built-in way to do this is to replace <code>cy.then(callback)</code> with <code>cy.should(callback)</code> and let it retry</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// âœ… retries fetching attributes</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// a callback that converts dataset</span>
  <span class="token comment">// and checks its values</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dataset</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;data-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>deep<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">indexNumber</span><span class="token operator">:</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&#39;cars&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),w=n("strong",null,"Alternative:",-1),O=n("code",null,"cy.toPlainObject",-1),S=n("code",null,"cy.map",-1),M=n("code",null,"cy.print",-1),A={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},C=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// &quot;cy.toPlainObject&quot; comes from cypress-map</span>
  <span class="token punctuation">.</span><span class="token function">toPlainObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// convert the property &quot;columns&quot; to a number</span>
  <span class="token comment">// leaving the rest of the properties unchanged</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">columns</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;dataset %o&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token literal-property property">indexNumber</span><span class="token operator">:</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&#39;cars&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can even map some property values to convert them before the assertion. For example, we can convert the number of columns from the string &quot;3&quot; to the number 3. Again, <code>cy.map</code> from <code>cypress-map</code> is our friend here:</p>`,2),I=n("h2",{id:"list-of-elements",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#list-of-elements","aria-hidden":"true"},"#"),s(" List of elements")],-1),J=n("p",null,[s("Let's confirm the data attributes from a list of elements. For example, let's confirm the "),n("code",null,"data-product-id"),s(" for every list element.")],-1),L=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a-list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-list-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>products<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>001<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Product A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>002<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Product B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-product-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>003<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Product C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.a-list&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-list-type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;products&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// cy.map comes from cypress-map plugin</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">&#39;dataset.productId&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;003&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T=n("h2",{id:"see-also",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#see-also","aria-hidden":"true"},"#"),s(" See also")],-1),B={href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*",target:"_blank",rel:"noopener noreferrer"};function D(E,U){const a=c("ExternalLinkIcon");return l(),i("div",null,[r,d,k,n("p",null,[s("ðŸ“º Watch this recipe explained at "),n("a",v,[s("Confirm All HTML data- Attributes At Once By Using The dataset Property"),t(a)]),s(".")]),e(" fiddle Using data attributes "),m,n("p",null,[b,s(" you can use "),n("a",g,[s("cy-spok"),t(a)]),s(" to confirm object properties.")]),e(" fiddle-end "),h,n("p",null,[s("Converting a browser object like "),f,s(" to a plain object using "),y,s(" is pretty common. If we use "),_,s(" commands we are breaking retries because "),q,s(" is not a query command. I suggest using my plugin "),n("a",j,[s("cypress-map"),t(a)]),s(" and its query commands to convert "),x,s(" to a plain JavaScript object.")]),e(" fiddle Convert dataset with retries "),N,n("p",null,[w,s(" use the query commands "),O,s(", "),S,s(", and "),M,s(" from "),n("a",A,[s("cypress-map"),t(a)]),s(" plugin. This way we can split all steps into smaller simpler subject transformations.")]),C,e(" fiddle-end "),I,J,e(" fiddle List of elements "),L,e(" fiddle-end "),T,n("ul",null,[n("li",null,[n("a",B,[s("Using data attributes"),t(a)])]),n("li",null,[n("a",P,[s("data-*"),t(a)])])])])}const R=o(u,[["render",D],["__file","dataset.html.vue"]]);export{R as default};
