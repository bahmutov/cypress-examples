import{_ as e,p as t,q as p,Q as a,R as n,t as s,a1 as c}from"./framework-e03faf0e.js";const o={},i=n("h1",{id:"phone-number",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#phone-number","aria-hidden":"true"},"#"),s(" Phone number")],-1),l=n("p",null,[s("Imagine you are validating a phone number, and we know the number will be in the format "),n("code",null,"123-XXX-XXXX"),s(". Here are a couple of alternatives.")],-1),u=c(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> phoneNumber <span class="token operator">=</span> <span class="token string">&#39;123-760-9001&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We can check if the phone number is a string with length 12.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>phoneNumber<span class="token punctuation">,</span> <span class="token string">&#39;12 chars&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span>and<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unfortunately, the assertion is way too forgiving.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;WRONG PHONE!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;also has 12 chars&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span>and<span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Maybe we need to use a regular expression. We know the phone number can only contain digits and <code>-</code> characters. Let&#39;s use the <code>match(regex)</code> assertion. Plus we can use <code>^</code> and <code>$</code> characters to make sure we match the entire string.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>phoneNumber<span class="token punctuation">,</span> <span class="token string">&#39;digits and -&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\d-]{12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ok, this looks better, but it still allows for some funny values.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;------------&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;just -&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\d-]{12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;0-0-0-0-0-0-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;caterpillar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\d-]{12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;123456789012&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wrong number of digits&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\d-]{12}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>My advice</strong> write the strictest regular expression possible enforcing the <em>type</em> and <em>position</em> of each character class. In our case it is the following regular expression:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> phoneRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d$</span><span class="token regex-delimiter">/</span></span>
<span class="token function">expect</span><span class="token punctuation">(</span>phoneNumber<span class="token punctuation">,</span> <span class="token string">&#39;phone #&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>phoneRegex<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want, you can write it differently:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> phoneRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{3}-\\d{3}-\\d{4}$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>All previous funny inputs fail our strict regular expression.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;WRONG PHONE!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;also has 12 chars&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>
  phoneRegex<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;------------&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;just -&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>phoneRegex<span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;0-0-0-0-0-0-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;caterpillar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>phoneRegex<span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;123456789012&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wrong number of digits&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>
  phoneRegex<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function r(d,k){return t(),p("div",null,[i,l,a(" fiddle Phone number "),u,a(" fiddle-end ")])}const v=e(o,[["render",r],["__file","phone-number.html.vue"]]);export{v as default};
