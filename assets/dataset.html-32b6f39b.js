import{_ as o,M as c,p as i,q as l,R as n,t as a,N as t,Q as e,a1 as p}from"./framework-e03faf0e.js";const r={},u=n("h1",{id:"dataset-html-attributes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dataset-html-attributes","aria-hidden":"true"},"#"),a(" Dataset HTML attributes")],-1),d=n("p",null,[a("You can store non-html information in the element "),n("code",null,"data-*"),a(" attributes and access them via "),n("code",null,"dataset"),a(" property.")],-1),k=n("h2",{id:"convert-dataset-to-a-plain-object",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#convert-dataset-to-a-plain-object","aria-hidden":"true"},"#"),a(" Convert dataset to a plain object")],-1),v={href:"https://youtu.be/t8BSY2czges",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>electric-cars<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-index-number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>12314<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cars<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  All about electric cards
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All <code>data-*</code> properties are collected in a single object. Property names are camel-cased, all values are strings. We can confirm a single property</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;indexNumber&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// equivalent to checking the &quot;data-*&quot; attribute</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>
  <span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;data-index-number&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s try confirming all <code>data-*</code> attributes. Directly comparing property with an object does not work</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ðŸš¨ INCORRECT</span>
<span class="token comment">// cannot compare dataset object with a plain object</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">indexNumber</span><span class="token operator">:</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&#39;cars&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead, yield the <code>dataset</code> value and convert into a plain object first before using <code>deep.equal</code> assertion.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;article#electric-cars&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// yields &quot;DOMStringMap&quot; object</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.prop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dataset&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// which we can convert into an object</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>stringify<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>parse<span class="token punctuation">)</span>
  <span class="token comment">// and compare as plain object</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.equal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">columns</span><span class="token operator">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">indexNumber</span><span class="token operator">:</span> <span class="token string">&#39;12314&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&#39;cars&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),b=n("strong",null,"Tip:",-1),h={href:"https://github.com/bahmutov/cy-spok",target:"_blank",rel:"noopener noreferrer"},g=p('<h2 id="query-commands" tabindex="-1"><a class="header-anchor" href="#query-commands" aria-hidden="true">#</a> Query commands</h2><p>Converting a browser object like <code>DOMStringMap</code> to a plain object using <code>JSON.parse(JSON.stringify(x))</code> is pretty common. If we use <code>cy.then(JSON.stringify).then(JSON.parse)</code> commands we are breaking retries because <code>cy.then</code> is not a query command.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See also</h2>',3),f={href:"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*",target:"_blank",rel:"noopener noreferrer"};function y(q,j){const s=c("ExternalLinkIcon");return i(),l("div",null,[u,d,k,n("p",null,[a("ðŸ“º Watch this recipe explained at "),n("a",v,[a("Confirm All HTML data- Attributes At Once By Using The dataset Property"),t(s)]),a(".")]),e(" fiddle Using data attributes "),m,n("p",null,[b,a(" you can use "),n("a",h,[a("cy-spok"),t(s)]),a(" to confirm object properties.")]),e(" fiddle-end "),g,n("ul",null,[n("li",null,[n("a",f,[a("Using data attributes"),t(s)])]),n("li",null,[n("a",_,[a("data-*"),t(s)])])])])}const N=o(r,[["render",y],["__file","dataset.html.vue"]]);export{N as default};
