import{_ as p,M as o,p as c,q as i,R as n,t as s,N as l,Q as a,a1 as t}from"./framework-e03faf0e.js";const u={},r=n("h1",{id:"or-attributes-assertion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#or-attributes-assertion","aria-hidden":"true"},"#"),s(" OR Attributes assertion")],-1),d={href:"https://youtu.be/qzY8-HI89DM",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"one-of-several-possible-attributes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#one-of-several-possible-attributes","aria-hidden":"true"},"#"),s(" One of several possible attributes")],-1),v=t(`<p>Let&#39;s confirm that an element we found has an attribute X OR has an attribute Y.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>person1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>first person<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>person2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-job</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>B<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>second person<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- this element lacks the attributes we are looking for --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>person3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>third person<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We want to confirm the given element either has the <code>data-name</code> attribute or has the <code>data-job</code> attribute. We can write such non-deterministic logic using <code>should(callback)</code> function.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token parameter">$el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check the presence of an attribute</span>
  <span class="token comment">// using the DOM Element &quot;hasAttribute&quot; method</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    $el<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-name&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    $el<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-job&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// all good, the element has one of the attributes</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Missing the required attributes&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#person1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>hasAttribute<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#person2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>hasAttribute<span class="token punctuation">)</span>
<span class="token comment">// enable to see a failed assertion</span>
<span class="token comment">// cy.get(&#39;#person3&#39;).should(hasAttribute)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),m=n("h2",{id:"one-of-several-possible-values",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#one-of-several-possible-values","aria-hidden":"true"},"#"),s(" One of several possible values")],-1),h=t(`<p>Let&#39;s say we are looking for an attribute, but it can have multiple values.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>person1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Joe<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>first person<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We want to confirm the <code>data-name</code> attribute is either &quot;Joe&quot; or &quot;Mary&quot;. We can get the attribute&#39;s value using <code>have.attr name</code> assertion, which yields the value, and then apply the <code>be.oneOf</code> assertion.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#person1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-name&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// yields the &quot;data-name&quot; attribute&#39;s value</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.oneOf&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Joe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mary&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b=n("h2",{id:"one-of-several-possible-values-with-retries",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#one-of-several-possible-values-with-retries","aria-hidden":"true"},"#"),s(" One of several possible values with retries")],-1),g=t(`<p>Even when chaining the assertions, they still apply to the same element. Thus even if the expected value of the attribute is set later, the test still finds it correctly.</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>person1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Bob<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>first person<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document
      <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;person1&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mary&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#person1&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.attr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data-name&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// yields the &quot;data-name&quot; attribute&#39;s value</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.oneOf&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Joe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mary&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function f(q,_){const e=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("You can watch the explanation for this recipe in the video "),n("a",d,[s("Check One Of Several Attributes Or Its Values"),l(e)]),s(".")]),k,a(" fiddle OR attributes "),v,a(" fiddle-end "),m,a(" fiddle OR values "),h,a(" fiddle-end "),b,a(" fiddle OR values retries "),g,a(" fiddle-end ")])}const w=p(u,[["render",f],["__file","or-attributes.html.vue"]]);export{w as default};
