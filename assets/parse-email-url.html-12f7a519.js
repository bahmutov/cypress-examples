import{_ as l,M as i,p as u,q as r,R as s,t as n,N as a,V as c,Q as e,a1 as p}from"./framework-e03faf0e.js";const k={},d=p('<h1 id="parse-email-url" tabindex="-1"><a class="header-anchor" href="#parse-email-url" aria-hidden="true">#</a> Parse Email URL</h1><p>Imagine the application opens a popup window just to send an email. The app might set the window location to load a specially formatted URL that would prompt the browser to open a local email client to actually send it. The URL would look like this <code>mailto:recipient?subject=...&amp;body=...</code>. Each key is encoded.</p><p>In the example below the email body has a link we want to test. We need to</p><ul><li>stub the <code>window.open</code> method call</li><li>grab the window URL and parse it</li><li>extract the discount link URL from the email body text</li><li>confirm the coupon text <code>GLEB10OFF</code></li></ul>',4),m=s("strong",null,"Tip:",-1),v=s("code",null,"window.open",-1),g=s("code",null,"window.open",-1),b={href:"https://glebbahmutov.com/blog/parse-email-url/",target:"_blank",rel:"noopener noreferrer"},h=s("h2",{id:"a-single-command-chain",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#a-single-command-chain","aria-hidden":"true"},"#"),n(" A single command chain")],-1),f=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Share link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document
  <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Use this promotion code&#39;</span><span class="token punctuation">)</span>
    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>
      <span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;Hello, friend&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Here is your link to get a discount&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;https://acme.co/discount/GLEB10OFF&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">const</span> emailUrl <span class="token operator">=</span> <span class="token string">&#39;mailto:recipient?&#39;</span> <span class="token operator">+</span> params<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
      emailUrl<span class="token punctuation">,</span>
      <span class="token string">&#39;email-popup&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;popup,width=300,height=300&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, we need to prepare the <code>window.open</code> method call by stubbing it.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">win</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  cy<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Click on the button to get the app to call the <code>window.open</code> stub</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Share link&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Confirm the <code>window.open</code> was called with a string as the first argument</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@open&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.been.calledOnceWith&#39;</span><span class="token punctuation">,</span> Cypress<span class="token punctuation">.</span>sinon<span class="token punctuation">.</span>match<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;firstCall.args.0&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// confirm the URL is an e mail link</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^mailto:recipient\\?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// grab the search arguments after the &quot;?&quot;</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;split&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token comment">// parse the search arguments using URLSearchParams API</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// confirm individual fields</span>
    <span class="token comment">// notice that values are already decoded by the URLSearchParams</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;subject&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>
      <span class="token string">&#39;Use this promotion code&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token comment">// let&#39;s work with the &quot;body&quot; text</span>
    <span class="token keyword">return</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// split the text into individual lines if needed</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;split&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\r&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// the last line is the invite link</span>
  <span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token comment">// confirm it is a HTTPS link</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https:\\/\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// the discount code is the last part of the URL in our case</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;split&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;equal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GLEB10OFF&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),w=s("strong",null,"Tip:",-1),_={href:"https://www.linkedin.com/in/dominik-kratz/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.mozilla.org/en-US/docs/Web/API/URL/parse_static",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"URL.parse",-1),j=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@open&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.been.calledOnceWith&#39;</span><span class="token punctuation">,</span> Cypress<span class="token punctuation">.</span>sinon<span class="token punctuation">.</span>match<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;firstCall.args.0&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span>parse<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;searchParams&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GLEB10OFF&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),L=s("h2",{id:"helpers-and-aliases",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#helpers-and-aliases","aria-hidden":"true"},"#"),n(" Helpers and aliases")],-1),U=s("strong",null,"Note:",-1),R={href:"https://github.com/bahmutov/cypress-map",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/bahmutov/cy-spok",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Share link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document
  <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Use this promotion code&#39;</span><span class="token punctuation">)</span>
    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>
      <span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;Hello, friend&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Here is your link to get a discount&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;https://acme.co/discount/GLEB10OFF&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">const</span> emailUrl <span class="token operator">=</span> <span class="token string">&#39;mailto:recipient?&#39;</span> <span class="token operator">+</span> params<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
      emailUrl<span class="token punctuation">,</span>
      <span class="token string">&#39;email-popup&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;popup,width=300,height=300&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our test starts the same way and stores the email URL params in an alias</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">win</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  cy<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Share link&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// get the email URL parameters</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@open&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.been.calledOnce&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;firstCall.args.0&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^mailto:recipient\\?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// grab the search arguments after the &quot;?&quot;</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;split&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token comment">// store the encoded search params string in an alias</span>
  <span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;params&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),P=s("code",null,"params",-1),q={href:"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams",target:"_blank",rel:"noopener noreferrer"},F=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@params&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>URLSearchParams<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toPlainObject</span><span class="token punctuation">(</span><span class="token string">&#39;entries&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.keys&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// confirm the email subject text</span>
  <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;have.property&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;subject&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Use this promotion code&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Get the email body and extract the HTTPS link. Imagine the link could be anywhere, so let&#39;s use a regular expression with a named capture group.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@email&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;match&#39;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;link&gt;https:\\/\\/\\S+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;groups.link&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can validate the link or visit it. Let&#39;s confirm the text <code>GLEB10OFF</code> is one of the path segments</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@link&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;split&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GLEB10OFF&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function I(B,O){const o=i("RouterLink"),t=i("ExternalLinkIcon");return u(),r("div",null,[d,s("p",null,[m,n(" I have covered stubbing "),v,n(" in the "),a(o,{to:"/recipes/stub-window-open.html"},{default:c(()=>[n("Stub "),g]),_:1}),n(" and "),a(o,{to:"/recipes/window-open.html"},{default:c(()=>[n("Window open")]),_:1}),n(" recipes.")]),s("p",null,[n("📝 Read the blog post "),s("a",b,[n("Parse Email Url"),a(t)])]),h,e(" fiddle Email window popup "),f,s("p",null,[w,n(" thanks to "),s("a",_,[n("Dominik Kratz"),a(t)]),n(" for suggesting simply parsing URL using the "),s("a",y,[n("URL.parse"),a(t)]),n(" static method. You would need a "),x,n(" polyfill if using an older browser to run tests.")]),j,e(" fiddle-end "),L,s("p",null,[U,n(" above I created a long chain of queries, commands, and assertions. You can simplify the same test using "),s("a",R,[n("cypress-map"),a(t)]),n(" and "),s("a",S,[n("cy-spok"),a(t)]),n(" plugins, and you can store intermediate values using "),a(o,{to:"/recipes/aliases.html"},{default:c(()=>[n("Cypress aliases")]),_:1})]),e(" fiddle Parse email URL using helpers "),E,s("p",null,[n("We now have the encoded URL search parameters in an alias "),P,n(". We can convert it to a plain object via "),s("a",q,[n("URLSearchParams"),a(t)]),n(" API.")]),F,e(" fiddle-end ")])}const T=l(k,[["render",I],["__file","parse-email-url.html.vue"]]);export{T as default};
