import{_ as u,M as p,p as l,q as i,R as n,t as s,N as e,V as d,Q as a,a1 as t}from"./framework-e03faf0e.js";const k={},r=n("h1",{id:"stub-calls-depending-on-the-arguments",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stub-calls-depending-on-the-arguments","aria-hidden":"true"},"#"),s(" Stub calls depending on the arguments")],-1),b={href:"https://sinonjs.org/",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"stub-all-calls",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stub-all-calls","aria-hidden":"true"},"#"),s(" Stub all calls")],-1),m=t(`<p>Imagine we have an object with the method <code>x</code> that doubles any value given to it.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> doubler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> x
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can test its actual behavior</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;10 x2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We can stub the method and any call would return the same mocked value</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>doubler<span class="token punctuation">,</span> <span class="token string">&#39;double&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;10 x2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;fun x2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can confirm the number of times the stubbed method was called</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span>calledTwice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And we can confirm the call arguments</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span><span class="token function">calledWith</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span><span class="token function">calledWith</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// an example of a negative assertion</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span><span class="token function">calledWith</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can reset the call history</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>doubler<span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">resetHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>be<span class="token punctuation">.</span>called
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span>calledOnce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can restore the default method behavior</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>doubler<span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&#39;funfun&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,14),h=n("h2",{id:"stub-calls-by-order",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stub-calls-by-order","aria-hidden":"true"},"#"),s(" Stub calls by order")],-1),f=n("p",null,"We can respond differently to different method calls. For example, we can return 1 on the first call, 2 on the second",-1),g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> doubler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> x
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

cy<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>doubler<span class="token punctuation">,</span> <span class="token string">&#39;double&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onFirstCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To add other stub behaviors take the stubbed method and use Sinon helpers.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>doubler<span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">onSecondCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span>calledTwice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All unspecified calls will get <code>undefined</code> result</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;third&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),x=n("h2",{id:"stub-plus-callthrough",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stub-plus-callthrough","aria-hidden":"true"},"#"),s(" Stub plus callThrough")],-1),j=n("p",null,[s("If you want to stub some calls, but call the original method for all other calls, use "),n("code",null,"callThrough")],-1),_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> doubler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> x
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

cy<span class="token punctuation">.</span><span class="token function">stub</span><span class="token punctuation">(</span>doubler<span class="token punctuation">,</span> <span class="token string">&#39;double&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">callThrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onFirstCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To add other stub behaviors take the stubbed method and use Sinon helpers.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>doubler<span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">onSecondCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>been<span class="token punctuation">.</span>calledTwice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All calls after the first two execute the original <code>doubler.double</code> method</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;third&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&#39;thirdthird&#39;</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>doubler<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function w(y,q){const o=p("ExternalLinkIcon"),c=p("RouterLink");return l(),i("div",null,[r,n("p",null,[s("Cypress bundled "),n("a",b,[s("Sinon.js"),e(o)]),s(" that allows one to stub method calls depending on the argument. Here are a few examples, for more see the "),e(c,{to:"/commands/spies-stubs-clocks.html"},{default:d(()=>[s("Spies, Stubs & Clocks")]),_:1}),s(".")]),v,a(" fiddle stub all calls "),m,a(" fiddle-end "),h,f,a(" fiddle stub calls by order "),g,a(" fiddle-end "),x,j,a(" fiddle stub calls by order plus callThrough "),_,a(" fiddle-end ")])}const T=u(k,[["render",w],["__file","stub-call-through.html.vue"]]);export{T as default};
